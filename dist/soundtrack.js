var typescript={};Object.defineProperty(typescript,"__esModule",{value:!0});var normalize_track_1=typescript.normalize_track=typescript.soundtrack=void 0;function normalize_track(track){var _a,_b,_c,_d,_e;switch(typeof track){case"object":if(!track.name)throw new Error(`New track definition missing name in normalize_track/1: ${JSON.stringify(track)}`);return{name:track.name,src:null!==(_a=track.src)&&void 0!==_a?_a:track.name+".mp3",start_offset:null!==(_b=track.start_offset)&&void 0!==_b?_b:0,end_offset:null!==(_c=track.end_offset)&&void 0!==_c?_c:0,loop_offset:null!==(_d=track.loop_offset)&&void 0!==_d?_d:0,loop:null===(_e=track.loop)||void 0===_e||_e};case"string":return normalize_track({name:track})}}normalize_track_1=typescript.normalize_track=normalize_track;var soundtrack_1=typescript.soundtrack=class{constructor(options){this._players=[],this._tracks=[],this._tracks_by_name=new Map,this._playing=!1,this._ready=!1,this._current=void 0;let opts=options||{tracks:[],autoplay:!1};if(this.load_tracks(opts.tracks),![void 0,!1].includes(opts.autoplay))switch(typeof opts.autoplay){case"number":case"string":this.play(opts.autoplay);break;case"boolean":this.play(0)}}play_by_track_number(track_number){if(this._playing=!0,void 0!==this._current){const this_player=this._players[this._current];if(void 0===this_player)throw new Error(`Player ${this_player}, referred to as current, does not exist`);this_player.pause()}const player=this._players[track_number];if(void 0===player)throw new Error(`No such track number ${track_number}`);return player.play(),this._current=track_number}play_by_name(track){const track_num=this.name_to_track_number(track);if(void 0===track_num)throw new Error(`No such track by name: ${track}`);return this.play_by_track_number(track_num)}play(track){switch(typeof track){case"number":return this.play_by_track_number(track);case"string":return this.play_by_name(track);default:throw new Error("Attempted to play an unknown type; requires a string or a number")}}load_tracks(tracks){tracks.map(normalize_track).forEach((t=>{if(this.has_track(t.name))throw new Error(`One or more of the listed tracks is already present: ${t}`)})),tracks.forEach((t=>{const norm=normalize_track(t),new_idx=this._tracks.push(norm)-1;this._tracks_by_name.set(norm.name,new_idx)}))}name_to_track_number(name){return this._tracks_by_name.get(name)}has_track(name){return this._tracks_by_name.has(name)}get is_playing(){return this._playing}get is_ready(){return this._ready}add_player(options){var _a;let player=new Audio(options.src),last_stamp=0,started=!1;player.autoplay=!1,player.currentTime=(null!==(_a=options.start_offset)&&void 0!==_a?_a:0)/1e3;let endline=options.end_offset,set_ready=to=>this._ready=to;player.oncanplaythrough=function(){set_ready(!0)};const host=this;return window.setInterval((()=>{var _a;let end_cut=1e3*player.duration-(null!=endline?endline:0);host.is_ready&&host.is_playing&&(!started||performance.now()-last_stamp>end_cut)&&(started&&(player.currentTime=null!==(_a=options.loop_offset)&&void 0!==_a?_a:0),started=!0,last_stamp=performance.now(),player.play())}),1),this._players.push(player)-1}};export{typescript as default,normalize_track_1 as normalize_track,soundtrack_1 as soundtrack};